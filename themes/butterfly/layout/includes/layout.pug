- var globalPageType = getPageType(page, is_home)
- var htmlClassHideAside = theme.aside.enable && theme.aside.hide ? 'hide-aside' : ''
- page.aside = globalPageType === 'archive' ? theme.aside.display.archive: globalPageType === 'category' ? theme.aside.display.category : globalPageType === 'tag' ? theme.aside.display.tag : page.aside
- var hideAside = !theme.aside.enable || page.aside === false ? 'hide-aside' : ''
- var pageType = globalPageType === 'post' ? 'post' : 'page'
- pageType = page.type ? pageType + ' type-' + page.type : pageType

doctype html
html(lang=config.language data-theme=theme.display_mode class=htmlClassHideAside)
  head
    include ./head.pug
  body
    !=partial('includes/loading/index', {}, {cache: true})

    if theme.background
      #web_bg(style=getBgPath(theme.background))

    !=partial('includes/sidebar', {}, {cache: true})

    #body-wrap(class=pageType)
      include ./header/index.pug

      main#content-inner.layout(class=hideAside)
        if body
          div!= body
        else
          block content
          if theme.aside.enable && page.aside !== false
            include widget/index.pug

      - const footerBg = theme.footer_img
      - const footer_bg = footerBg ? footerBg === true ? bg_img : getBgPath(footerBg) : ''
      footer#footer(style=footer_bg)
        !=partial('includes/footer', {}, {cache: true})

    include ./rightside.pug
    include ./additional-js.pug

    script.
      if ('serviceWorker' in navigator) {
        // 网络状态管理类
        class NetworkStatusManager {
          constructor(config) {
            this.config = config;
            this.offlineTimer = null;
          }

          showNotification(status) {
            const config = this.config[status];
            if (!config) return;

            const message = config.messages[Math.floor(Math.random() * config.messages.length)];
            
            // 清除之前的离线定时器
            if (this.offlineTimer) {
              clearTimeout(this.offlineTimer);
              this.offlineTimer = null;
            }

            Snackbar.show({
              text: message,
              pos: 'top-center',
              duration: status === 'offline' ? null : config.duration,
              backgroundColor: config.backgroundColor,
              showAction: false,
              customClass: `network-status-${status}`,
              onClose: () => {
                if (status === 'offline' && !navigator.onLine) {
                  this.offlineTimer = setTimeout(() => this.showNotification('offline'), 1000);
                }
              }
            });
          }

          init() {
            window.addEventListener('online', () => this.showNotification('online'));
            window.addEventListener('offline', () => this.showNotification('offline'));

            navigator.serviceWorker.addEventListener('message', (event) => {
              if (event.data.type === 'network-status') {
                this.showNotification(event.data.status);
              }
            });
          }
        }

        // 初始化网络状态管理
        const networkManager = new NetworkStatusManager(!{JSON.stringify(site.data.network_status)});
        networkManager.init();

        // 注册 Service Worker
        navigator.serviceWorker.register('/sw.js', {
          scope: '/'
        }).then(() => {
          if (!localStorage.getItem('install')) {
            localStorage.setItem('install', 'true');
            if (!navigator.onLine) {
              networkManager.showNotification('offline');
            }
          }
        }).catch(error => {
          console.error('Service Worker 注册失败:', error);
        });
      }
