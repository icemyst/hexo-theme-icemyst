- var globalPageType = getPageType(page, is_home)
- var htmlClassHideAside = theme.aside.enable && theme.aside.hide ? 'hide-aside' : ''
- page.aside = globalPageType === 'archive' ? theme.aside.display.archive: globalPageType === 'category' ? theme.aside.display.category : globalPageType === 'tag' ? theme.aside.display.tag : page.aside
- var hideAside = !theme.aside.enable || page.aside === false ? 'hide-aside' : ''
- var pageType = globalPageType === 'post' ? 'post' : 'page'
- pageType = page.type ? pageType + ' type-' + page.type : pageType

doctype html
html(lang=config.language data-theme=theme.display_mode class=htmlClassHideAside)
  head
    include ./head.pug
  body
    !=partial('includes/loading/index', {}, {cache: true})

    if theme.background
      #web_bg(style=getBgPath(theme.background))

    !=partial('includes/sidebar', {}, {cache: true})

    #body-wrap(class=pageType)
      include ./header/index.pug

      main#content-inner.layout(class=hideAside)
        if body
          div!= body
        else
          block content
          if theme.aside.enable && page.aside !== false
            include widget/index.pug

      - const footerBg = theme.footer_img
      - const footer_bg = footerBg ? footerBg === true ? bg_img : getBgPath(footerBg) : ''
      footer#footer(style=footer_bg)
        !=partial('includes/footer', {}, {cache: true})

    include ./rightside.pug
    include ./additional-js.pug
    
    #sw-update-popup.sw-update-popup
      .message-container
        p.message 发现新版本
        p.sub-message 点击更新以获取最新功能
      button.refresh-btn(onclick="window.location.reload()") 立即更新
      button.close-btn
        i.fas.fa-times
      
    script.
      if ('serviceWorker' in navigator) {
        const updatePopup = document.getElementById('sw-update-popup');
        
        // 隐藏更新提示
        const hideUpdateNotification = () => {
          updatePopup.style.animation = 'sw-notification-out 0.5s cubic-bezier(0.34, 1.56, 0.64, 1) forwards';
          updatePopup.classList.remove('show');
          setTimeout(() => {
            if (!updatePopup.classList.contains('show')) {
              updatePopup.style.pointerEvents = 'none';
              updatePopup.style.visibility = 'hidden';
              updatePopup.style.animation = '';
            }
          }, 500);
        };
        
        // 显示更新提示
        const showUpdateNotification = () => {
          updatePopup.style.visibility = 'visible';
          updatePopup.style.pointerEvents = 'auto';
          updatePopup.classList.add('show');
          setTimeout(hideUpdateNotification, 30000);
        };
        
        // 初始化
        document.addEventListener('DOMContentLoaded', () => {
          if (!updatePopup.classList.contains('show')) {
            updatePopup.style.pointerEvents = 'none';
            updatePopup.style.visibility = 'hidden';
          }
          updatePopup.querySelector('.close-btn').addEventListener('click', hideUpdateNotification);
        });
        
        // 注册 Service Worker
        navigator.serviceWorker.register('/sw.js', { 
          scope: '/', 
          updateViaCache: 'none' 
        })
        .then(registration => {
          const handleUpdate = () => showUpdateNotification();
          
          registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            if (newWorker) {
              newWorker.addEventListener('statechange', () => {
                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                  handleUpdate();
                }
              });
            }
          });
          
          if (registration.waiting && navigator.serviceWorker.controller) {
            handleUpdate();
          }
        })
        .catch(error => console.debug('Service Worker 注册失败:', error));
      }